AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

  Api:
    TracingEnabled: true

Parameters:
  BucketName:
    Type: String
    Default: sample-bucket-f438c70f-17f3-4fdb-8085-f847589306df
    Description: Default Bucket Name
  QueueName:
    Type: String
    Default: sampleQueuePattern2.fifo
    Description: Default Queue Name
  LambdaSecurityGroup:
    Type: String
    Default: sg-07dc47c472d41aeee
    Description: Lambda Security Goup Id
  Subnet1:
    Type: String
    Default: subnet-02721270caa4d237e
    Description: Subnet1 Id
  Subnet2:
    Type: String
    Default: subnet-0288a2a5fc6bbad37
    Description: Subnet2 Id

Resources:
  # Api Gateway
  ProdApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ProdApiPattern2
      StageName: prod  # ← ここがデフォルトステージ名になる
  #     Open API との紐づけ (Lambda とAPI Gateway が紐づかなくなる問題があるので後回し)
  #     DefinitionBody:
  #       Fn::Transform:
  #         Name: AWS::Include
  #         Parameters:
  #           Location: openapi.yml

  # Lambda レイヤー
  PowertoolsLayerPattern2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PowertoolsLayerPattern2
      ContentUri: layers/powertools
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: x86_64

  SqlalchemyLayerPattern2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SqlalchemyLayerPattern2
      ContentUri: layers/sqlalchemy
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: x86_64

  SqlModelsLayerPattern2:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SqlModelsLayerPattern2
      ContentUri: layers/sql_models
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: x86_64

  HelloWorldV1FunctionPattern2:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: HelloWorldV1FunctionPattern2
      AutoPublishAlias: v1
      AutoPublishCodeSha256: sample
      CodeUri: src/hello_world_v1/
      Handler: app.handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ProdApi

  # S3 {
  SampleBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref BucketName

  PutS3ObjectV1FunctionPattern2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutS3ObjectV1FunctionPattern2
      AutoPublishAlias: v1
      CodeUri: src/S3_v1
      Handler: app.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${SampleBucket.Arn}/*
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sample/*
      Events:
        PutS3Object:
          Type: Api
          Properties:
            Path: /s3
            Method: post
            RestApiId: !Ref ProdApi
  # }

  # EventBridge
  EventBridgeV1FunctionPattern2:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: "EventBridgeV1FunctionPattern2"
      AutoPublishAlias: v1
      CodeUri: src/EventBridge_v1
      Handler: app.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt PutS3ObjectV1FunctionPattern2.Arn
      Events:
        SampleEventPattern2:
          Type: Schedule
          Properties:
            Name: SampleEventPattern2
            Schedule: 'rate(365 days)'
            State: ENABLED
  # }

  # SQS {
  SampleQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Ref QueueName
      ContentBasedDeduplication: true

  SQSRecieverV1FunctionPattern2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "SQSRecieverV1FunctionPattern2"
      AutoPublishAlias: v1
      CodeUri: src/SQS_v1
      Handler: reciever.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt PutS3ObjectV1FunctionPattern2.Arn
      Events:
        SqsReciever:
          Type: SQS
          Properties:
            Queue: !GetAtt SampleQueue.Arn

  SQSSenderV1FunctionPattern2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "SQSSenderV1FunctionPattern2"
      AutoPublishAlias: v1
      CodeUri: src/SQS_v1
      Handler: sender.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sqs:GetQueueUrl
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SampleQueue.Arn
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sample/*
      Events:
        SQSSender:
          Type: Api
          Properties:
            Path: /sqs
            Method: post
            RestApiId: !Ref ProdApi
  # }

  CreateDBDataV1FunctionPattern2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateDBDataV1FunctionPattern2
      AutoPublishAlias: v1
      CodeUri: src/Aurora_v1
      Handler: app.handler
      Runtime: python3.13
      Timeout: 30
      Layers:
        - !Ref PowertoolsLayerPattern2
        - !Ref SqlalchemyLayerPattern2
        - !Ref SqlModelsLayerPattern2
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
          - Effect: Allow
            Action:
              - rds-db:connect
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
      Events:
        PutS3Object:
          Type: Api
          Properties:
            Path: /db
            Method: post
            RestApiId: !Ref ProdApi

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldV1Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/prod/hello/"
  PutS3ObjectV1Api:
    Description: S3 オブジェクト追加用API
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/s3/"
  SQSSenderV1V1Api:
    Description: SQS メッセージ送信用API
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sqs/"
  CreateDBDataV1Api:
    Description: RDS データ挿入用API
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/db/"

  # LocalStack 用API {
  LocalStackHelloWorldV1Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function in LocalStack
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/hello"
  LocalStackPutS3ObjectV1Api:
    Description: LocalStack でのS3 オブジェクト追加用API
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/s3"
  LocalStackSQSSenderV1V1Api:
    Description: SQS メッセージ送信用API
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/sqs/"
  LocalStackCreateDBDataV1Api:
    Description: RDS データ挿入用API
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/db/"
  # }

  HelloWorldV1FunctionPattern2:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldV1FunctionPattern2.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldV1FunctionPattern2Role.Arn
