AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        BUCKET_NAME: sample-bucket-8b902d87-1c66-4cb6-9eae-a180842c6351
        OBJECT_NAME: sample.txt
        QUEUE_NAME: sampleQueue.fifo

  Api:
    TracingEnabled: true

Parameters:
  BucketName:
    Type: String
    Default: sample-bucket-8b902d87-1c66-4cb6-9eae-a180842c6351
    Description: Default Bucket Name
  QueueName:
    Type: String
    Default: sampleQueue.fifo
    Description: Default Queue Name
  DatabaseName:
    Type: String
    Default: SampleDB
    Description: Default Database Name
  DBEngine:
    Type: String
    Default: aurora-postgresql
    Description: Default Database Engine
  RDSProxyName:
    Type: String
    Default: sample-rds-proxy-18bd54cb-7b7f-42fb-95a5-df7b59cb730d
    Description: Default RDS Proxy Name

Resources:
  # Api Gateway
  ProdApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ProdApi
      StageName: prod  # ← ここがデフォルトステージ名になる
  #     Open API との紐づけ (Lambda とAPI Gateway が紐づかなくなる問題があるので後回し)
  #     DefinitionBody:
  #       Fn::Transform:
  #         Name: AWS::Include
  #         Parameters:
  #           Location: openapi.yml

  # パラメータストア
  ObjectNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sample/object_name
      Type: String
      Value: sample.txt
      Description: Default S3 Object Name
  RegionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sample/region
      Type: String
      Value: ap-northeast-1
      Description: Default AWS Region
  BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sample/bucket_name
      Type: String
      Value: !Sub ${BucketName}
      Description: Default S3 Bucket Name
  QueueNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sample/queue_name
      Type: String
      Value: !Sub ${QueueName}
      Description: Default Queue Name

  # Lambda レイヤー
  PowertoolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: PowertoolsLayer
      ContentUri: layers/powertools
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13
      BuildArchitecture: x86_64

  HelloWorldV1Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: HelloWorldV1Function
      AutoPublishAlias: v1
      CodeUri: src/hello_world_v1/
      Handler: app.handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayer
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref ProdApi

  # S3 {
  SampleBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: sample-bucket-8b902d87-1c66-4cb6-9eae-a180842c6351

  PutS3ObjectV1Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutS3ObjectV1Function
      AutoPublishAlias: v1
      CodeUri: src/S3_v1
      Handler: app.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayer
      Architectures:
        - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${SampleBucket.Arn}/*
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sample/*
      Events:
        PutS3Object:
          Type: Api
          Properties:
            Path: /s3
            Method: post
            RestApiId: !Ref ProdApi
  # }

  # EventBridge
  EventBridgeV1Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: "EventBridgeV1Function"
      AutoPublishAlias: v1
      CodeUri: src/EventBridge_v1
      Handler: app.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayer
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt PutS3ObjectV1Function.Arn
      Events:
        SampleEvent:
          Type: Schedule
          Properties:
            Name: SampleEvent
            Schedule: 'rate(365 days)'
            State: ENABLED
  # }

  # SQS {
  SampleQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: sampleQueue.fifo
      ContentBasedDeduplication: true

  SQSRecieverV1Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "SQSRecieverV1Function"
      AutoPublishAlias: v1
      CodeUri: src/SQS_v1
      Handler: reciever.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayer
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt PutS3ObjectV1Function.Arn
      Events:
        SqsReciever:
          Type: SQS
          Properties:
            Queue: !GetAtt SampleQueue.Arn

  SQSSenderV1Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "SQSSenderV1Function"
      AutoPublishAlias: v1
      CodeUri: src/SQS_v1
      Handler: sender.lambda_handler
      Runtime: python3.13
      Layers:
        - !Ref PowertoolsLayer
      Architectures:
      - x86_64
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sqs:GetQueueUrl
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SampleQueue.Arn
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/sample/*
      Events:
        SQSSender:
          Type: Api
          Properties:
            Path: /sqs
            Method: post
            RestApiId: !Ref ProdApi
  # }

  # Aurora
  SampleCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Ref DatabaseName
      Engine: !Ref DBEngine
      MasterUsername: SampleUser
      ManageMasterUserPassword: true

  SampleInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref SampleCluster
      DBInstanceClass: db.t2.micro
      Engine: !Ref DBEngine
      PubliclyAccessible: false

  SampleRDSProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      Auth:
        - AuthScheme: SECRETS
          ClientPasswordAuthType: POSTGRES_SCRAM_SHA_256
          Description: RDS Prosy Auth
          IAMAuth: DISABLED
          SecretArn: !GetAtt SampleCluster.MasterUserSecret.SecretArn
      DBProxyName: !Ref RDSProxyName
      EngineFamily: POSTGRESQL
      RoleArn: !GetAtt RDSProxyRole.Arn
      VpcSubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.1.0.0/24
      VpcId: !Ref VPC

  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.1.1.0/24
      VpcId: !Ref VPC

  # RDS Proxy がSecret Manager の値を取得する権限
  RDSProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSProxyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldV1Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/prod/hello/"
  PutS3ObjectV1Api:
    Description: S3 オブジェクト追加用API
    Value: !Sub "https://${ProdApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/s3/"

  # LocalStack 用API {
  LocalStackHelloWorldV1Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function in LocalStack
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/hello"
  LocalStackPutS3ObjectV1Api:
    Description: LocalStack でのS3 オブジェクト追加用API
    Value: !Sub "http://localstack:4566/restapis/${ProdApi}/prod/_user_request_/s3"
  # }

  HelloWorldV1Function:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldV1Function.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldV1FunctionRole.Arn
